# config/settings.py
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os, boto3

# AWS Parameter Store에서 환경 변수 로드하는 함수
def load_aws_parameters():
    client = boto3.client('ssm', region_name='ap-northeast-2')

    response = client.get_parameters_by_path(
        Path='/FINALPROJ/PARAMETERS/',
        Recursive=True,
        WithDecryption=True
    )

    for param in response['Parameters']:
        key = param['Name'].split('/')[-1]
        value = param['Value']
        os.environ[key] = value

        # 디버그 출력: 값 일부만 출력
        if len(value) > 8:
            print(f"🔑 Loaded: {key} = {value[:4]}... (len={len(value)})")
        else:
            print(f"🔑 Loaded: {key} = {value}")

    print(f"All loaded keys: {', '.join([p['Name'].split('/')[-1] for p in response['Parameters']])}")

# AWS Parameter Store에서 환경 변수 로드
load_aws_parameters()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = ['*']


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 앱 추가
    "rest_framework", 
    "corsheaders",
    'api',
    'code_t',
    'user',
    'event',
    'case',
    'markdownify'
]

# settings.py
MARKDOWNIFY = {
    "default": {
        "WHITELIST_TAGS": [
            "a", "abbr", "acronym", "b", "blockquote", "code",
            "em", "i", "li", "ol", "strong", "ul", "h1", "h2", "h3", "p", "br"
        ],
        "MARKDOWN_EXTENSIONS": [
            "markdown.extensions.fenced_code",
            "markdown.extensions.tables",
            "markdown.extensions.nl2br",  # 줄바꿈 자동 <br> 처리
        ],
    }
}

# 사용자 커스텀 모델 설정
AUTH_USER_MODEL = "user.CustomUser"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", # CORS 미들웨어 추가
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user.middleware.JWTAuthRefreshMiddleware',
]

# 모든 도메인의 요청을 허용하고 쿠키 포함 허용
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [  # 이 부분이 꼭 필요!
    "DELETE",
    "GET",
    "OPTIONS",  # ← 이거 중요!
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "*",
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],  # 템플릿 디렉토리 설정
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Django REST Framework의 예외 핸들러 설정
REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'authentication.exceptions.status_code_handler',  # 예외 발생 시 호출될 핸들러
    
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'user.service.jwt_auth.JWTAuthentication',  # JWT 인증 클래스 설정
    ]
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 로컬 MySQL 설정 (docker 환경에서 사용)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'final_db',
#         'USER': 'final_user',
#         'PASSWORD': 'f1234',
#         'HOST': 'localhost',
#         'PORT': '3306',
#     }
# }

# AWS RDS MySQL 설정
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv("MYSQL_DB"),
        'USER': os.getenv("MYSQL_USER"),
        'PASSWORD': os.getenv("MYSQL_PWD"),
        'HOST': os.getenv("MYSQL_HOST"),
        'PORT': os.getenv("MYSQL_PORT"),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'
TIME_ZONE = 'Asia/Seoul'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATIC_PATH = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = (STATIC_PATH,)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
